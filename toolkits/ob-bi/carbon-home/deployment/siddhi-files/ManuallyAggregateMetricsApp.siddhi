/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("ManuallyAggregateMetricsApp")

--Stream to retrigger matrics data aggregations
@source(type='http', receiver.url='http://<BI_HOSTNAME>:8290/repopulate-cds-metrics', @map(type='json'))
define stream TriggerRepopulateStream(fromTimestamp long, toTimestamp long);

--Stream to retain timestamp range in a window to retrigger aggregations
define stream TriggeredTimeRangeStream(fromTs long, toTs long);

@sink(type='inMemory',topic='apiInvocationRawData', @map(type='passThrough'))
define stream CDSMetricsRawStream(id string, statusCode int, respTime long, electedResource string, reqTimestamp long,
                        customerStatus string);

@primaryKey('ID','ELECTED_RESOURCE')
@store(type='rdbms', datasource='OB_REPORTING_DB')
@Index('TIMESTAMP', 'MESSAGE_ID')
define table API_INVOCATION_RAW_DATA(ID string, MESSAGE_ID string, CONSENT_ID string, CONSUMER_ID string,
                        CLIENT_ID string, USER_AGENT string, STATUS_CODE int, STATUS_MESSAGE string, HTTP_METHOD string,
                        RESPONSE_PAYLOAD_SIZE long, ELECTED_RESOURCE string, API_NAME string, API_SPEC_VERSION string,
                        TIMESTAMP long, CUSTOMER_STATUS string, ACCESS_TOKEN_ID string, SESSION_TYPE string);

@primaryKey('ID','MESSAGE_ID')
@store(type='rdbms', datasource='OB_REPORTING_DB')
define table API_LATENCY_RAW_DATA(ID string, MESSAGE_ID string, REQUEST_TIMESTAMP string, BACKEND_LATENCY long,
                        REQUEST_MEDIATION_LATENCY long, RESPONSE_LATENCY long, RESPONSE_MEDIATION_LATENCY long);

from TriggerRepopulateStream
select fromTimestamp as fromTs, toTimestamp as toTs
insert into TriggeredTimeRangeStream;

-- Generate CDS Metrics Raw stream from raw data tables
from TriggeredTimeRangeStream#window.length(1) as t
join API_INVOCATION_RAW_DATA as invocation
  on invocation.TIMESTAMP >= t.fromTs and invocation.TIMESTAMP <= t.toTs
select invocation.MESSAGE_ID as messageId,
       invocation.STATUS_CODE as statusCode,
       invocation.ELECTED_RESOURCE as electedResource,
       invocation.TIMESTAMP * 1000 as reqTimestamp,
       invocation.CUSTOMER_STATUS as customerStatus
insert into FilteredInvocationsForJoin;

from FilteredInvocationsForJoin as invocation
join API_LATENCY_RAW_DATA as latency
  on invocation.messageId == latency.MESSAGE_ID
select invocation.messageId as id,
       invocation.statusCode as statusCode,
       ifThenElse(latency.RESPONSE_LATENCY is null, 0L, latency.RESPONSE_LATENCY) as respTime,
       invocation.electedResource as electedResource,
       invocation.reqTimestamp as reqTimestamp,
       invocation.customerStatus as customerStatus
insert into CDSMetricsRawStream;
