/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("CDSInvocationMetricsApp")
@App:description('Aggregate API invocation data to be used by CDS Metrics API')

@source(type='inMemory', topic='apiInvocationRawData', @map(type='passThrough'))
define stream CDSMetricsRawStream(id string, statusCode int, respTime long, electedResource string, reqTimestamp long, customerStatus string);

define stream CDSMetricsPreprocessedStream(id string, statusCode int, respTime long, priorityTier string, aspect string, reqTimestamp long);

define stream PerformanceMetricsStream(withinThreshold bool, totalReqCount long, reqTimestamp long);

define stream PerformanceMetricsPriorityStream(priorityTier string, withinThreshold bool, reqTimestamp long);

define stream PerformanceMetricsPriorityPreProcessedStream(priorityTier string, withinThresholdCount double, reqTimestamp long);

define function getPriorityTier[JavaScript] return string {
	var priorityTier;
	var electedResource = data[0];
	var customerStatus = data[1];
	var unauthenticatedList = ["/banking/products", "/banking/products/{productId}"];
	var highPriorityList = ["/banking/accounts", "/discovery/status", "/discovery/outages", "/common/customer", "/common/customer/detail", "/register",
	        "/register/{ClientId}", "/", "/token", "/authorize", "/revoke", "/userinfo", "/introspect", "/jwks", "/.well-known/openid-configuration", "/par"];
	var lowPriorityList = ["/banking/accounts/{accountId}", "/banking/accounts/{accountId}/balance", "/banking/accounts/balances", "/banking/accounts/{accountId}/transactions",
	        "/banking/accounts/{accountId}/transactions/{transactionId}", "/banking/payees", "/banking/payees/{payeeId}", "/banking/accounts/{accountId}/direct-debits",
	        "/banking/accounts/{accountId}/payments/scheduled", "/banking/payments/scheduled"];
	var unattendedList = [ "/register/metadata", "/metrics"];
	var largePayloadList = ["/banking/accounts/direct-debits"];

	if (lowPriorityList.indexOf(electedResource) > -1 && 'customer-present' == customerStatus) {
	  priorityTier = "LowPriority";
	} else if (highPriorityList.indexOf(electedResource) > -1 && ('customer-present' == customerStatus || 'undefined' == customerStatus)) {
	  priorityTier = "HighPriority";
	} else if ((highPriorityList.indexOf(electedResource) > -1 || lowPriorityList.indexOf(electedResource) > -1)  && 'unattended' == customerStatus) {
    	  priorityTier = "Unattended";
	} else if (unauthenticatedList.indexOf(electedResource) > -1) {
	  priorityTier = "Unauthenticated";
	} else if (unattendedList.indexOf(electedResource) > -1) {
	  priorityTier = "Unattended";
	} else if (largePayloadList.indexOf(electedResource) > -1) {
	  priorityTier = "LargePayload";
	} else {
	  priorityTier = "Uncategorized";
	}

	return priorityTier;
};

define function getIsWithinThreshold[JavaScript] return bool {
	var priorityTier = data[0];
	var respTime = data[1];
	var nominatedRespTime;
	var withinThreshold;

	if ('LowPriority' == priorityTier) {
	  nominatedRespTime = 1500;
	} else if ('HighPriority' == priorityTier) {
	  nominatedRespTime = 1000;
	} else if ('Unauthenticated' == priorityTier) {
	  nominatedRespTime = 1500;
	} else if ('Unattended' == priorityTier) {
	  nominatedRespTime = 4000;
	} else if ('LargePayload' == priorityTier) {
	  nominatedRespTime = 6000;
	} else {
	  nominatedRespTime = 0;
	}

	return respTime < nominatedRespTime;
};

define function getAspect[JavaScript] return string {
	var aspect;
	var electedResource = data[0];
	var unauthenticatedList = ['/banking/products', '/banking/products/{productId}', '/discovery/status', '/discovery/outages'];
	var authenticatedList = ['/banking/accounts', '/common/customer', '/common/customer/detail', '/register', '/register/{ClientId}',
            '/', '/token', '/authorize', '/revoke', '/userinfo', '/introspect', '/jwks', '/.well-known/openid-configuration', '/par',
            '/banking/accounts/{accountId}', '/banking/accounts/{accountId}/balance', '/banking/accounts/balances',
            '/banking/accounts/{accountId}/transactions', '/banking/accounts/{accountId}/transactions/{transactionId}',
            '/banking/payees', '/banking/payees/{payeeId}', '/banking/accounts/{accountId}/direct-debits',
            '/banking/accounts/{accountId}/payments/scheduled', '/banking/payments/scheduled', '/register/metadata',
            '/metrics', '/banking/accounts/direct-debits'];

    if (unauthenticatedList.indexOf(electedResource) > -1) {
        aspect = 'unauthenticated';
    } else if (authenticatedList.indexOf(electedResource) > -1) {
        aspect = 'authenticated';
    } else {
        aspect = 'uncategorized';
    }

	return aspect;
};

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsAgg
from CDSMetricsPreprocessedStream
select id as ID, priorityTier, sum(respTime) as totalRespTime, count() as totalReqCount
group by priorityTier
aggregate by reqTimestamp every seconds...month;

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsAspectAgg
from CDSMetricsPreprocessedStream
select id as ID, aspect, sum(respTime) as totalRespTime, count() as totalReqCount
group by aspect
aggregate by reqTimestamp every seconds...month;

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsStatusAgg
from CDSMetricsPreprocessedStream
select id as ID, statusCode, count() as totalReqCount
group by statusCode
aggregate by reqTimestamp every seconds...month;

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsStatusAspectAgg
from CDSMetricsPreprocessedStream
select id as ID, statusCode, aspect, count() as totalReqCount
group by statusCode, aspect
aggregate by reqTimestamp every seconds...month;

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsPerfAgg
from PerformanceMetricsStream
select withinThreshold, count() as totalReqCount
group by withinThreshold
aggregate by reqTimestamp every seconds...month;

@store(type='rdbms', datasource='OB_REPORTING_DB')
@purge(enable='true', interval='60 min', @retentionPeriod(sec='10 days', min='10 days', hours='90 days', days='1 year', months='2 years'))
define aggregation CDSMetricsPerfPriorityAgg
from PerformanceMetricsPriorityPreProcessedStream
select priorityTier, sum(withinThresholdCount) as withinThresholdCount, count() as totalReqCount
group by priorityTier
aggregate by reqTimestamp every seconds...month;

from CDSMetricsRawStream
select id, statusCode, respTime, getPriorityTier(electedResource, customerStatus) as priorityTier, getAspect(electedResource) as aspect, reqTimestamp
insert into CDSMetricsPreprocessedStream;

from CDSMetricsPreprocessedStream[priorityTier != "Uncategorized"]
select getIsWithinThreshold(priorityTier, respTime) as withinThreshold, count() as totalReqCount, reqTimestamp
insert into PerformanceMetricsStream;

from CDSMetricsPreprocessedStream[priorityTier != "Uncategorized"]
select priorityTier, getIsWithinThreshold(priorityTier, respTime) as withinThreshold, reqTimestamp
insert into PerformanceMetricsPriorityStream;

from PerformanceMetricsPriorityStream
select priorityTier, ifThenElse(withinThreshold == true, 1.0, 0.0) as withinThresholdCount, reqTimestamp
insert into PerformanceMetricsPriorityPreProcessedStream;

